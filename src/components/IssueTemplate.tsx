import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Copy, Check, FileText, Upload, X } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface IssueTemplateProps {
  initialTemplate: {
    title: string;
    description: string;
    reproductionSteps: string[];
    expectedBehavior: string;
    actualBehavior: string;
    appId?: string;
    environment?: string;
    browserInfo?: string;
  };
  onGenerate: (template: any) => void;
}

const IssueTemplate = ({ initialTemplate, onGenerate }: IssueTemplateProps) => {
  const [template, setTemplate] = useState(initialTemplate);
  const [screenshots, setScreenshots] = useState<File[]>([]);
  const [copied, setCopied] = useState(false);
  const [showMarkdown, setShowMarkdown] = useState(false);
  const { toast } = useToast();

  const generateMarkdown = () => {
    return `# ${template.title}

## Description
${template.description}

## Steps to Reproduce
${template.reproductionSteps.map((step, index) => `${index + 1}. ${step}`).join('\n')}

## Expected Behavior
${template.expectedBehavior}

## Actual Behavior
${template.actualBehavior}

## Technical Information
${template.appId ? `- **App ID**: ${template.appId}` : ''}
${template.environment ? `- **Environment**: ${template.environment}` : ''}
${template.browserInfo ? `- **Browser**: ${template.browserInfo}` : ''}

## Screenshots
${screenshots.length > 0 ? screenshots.map(file => `- ${file.name}`).join('\n') : '_No screenshots attached_'}

---
*Generated by Intercom â†’ GitHub Issue Generator*`;
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generateMarkdown());
      setCopied(true);
      toast({
        title: "Copied!",
        description: "GitHub issue template copied to clipboard",
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      toast({
        title: "Copy failed",
        description: "Please copy the markdown manually",
        variant: "destructive",
      });
    }
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    setScreenshots(prev => [...prev, ...files]);
  };

  const removeScreenshot = (index: number) => {
    setScreenshots(prev => prev.filter((_, i) => i !== index));
  };

  return (
    <Card className="w-full animate-fade-in">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="w-5 h-5 text-primary" />
          GitHub Issue Template
        </CardTitle>
        <CardDescription>
          Review and enhance the generated issue template before creating the GitHub issue
        </CardDescription>
      </CardHeader>
      
      <CardContent>
        <Tabs defaultValue="edit" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="edit">Edit Template</TabsTrigger>
            <TabsTrigger value="preview">Preview Markdown</TabsTrigger>
          </TabsList>
          
          <TabsContent value="edit" className="space-y-6 mt-6">
            {/* Issue Title */}
            <div className="space-y-2">
              <Label htmlFor="title" className="text-sm font-medium">Issue Title*</Label>
              <Input
                id="title"
                value={template.title}
                onChange={(e) => setTemplate(prev => ({ ...prev, title: e.target.value }))}
                placeholder="Brief, descriptive title for the issue"
                className="text-base"
              />
            </div>

            {/* Description */}
            <div className="space-y-2">
              <Label htmlFor="description" className="text-sm font-medium">Description</Label>
              <Textarea
                id="description"
                value={template.description}
                onChange={(e) => setTemplate(prev => ({ ...prev, description: e.target.value }))}
                placeholder="Detailed description of the issue"
                rows={4}
                className="resize-none"
              />
            </div>

            {/* Technical Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="appId" className="text-sm font-medium">App ID*</Label>
                <Input
                  id="appId"
                  value={template.appId || ''}
                  onChange={(e) => setTemplate(prev => ({ ...prev, appId: e.target.value }))}
                  placeholder="e.g., abc123"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="environment" className="text-sm font-medium">Environment</Label>
                <Input
                  id="environment"
                  value={template.environment || ''}
                  onChange={(e) => setTemplate(prev => ({ ...prev, environment: e.target.value }))}
                  placeholder="e.g., Production"
                />
              </div>
            </div>

            {/* Browser Info */}
            <div className="space-y-2">
              <Label htmlFor="browserInfo" className="text-sm font-medium">Browser Information</Label>
              <Input
                id="browserInfo"
                value={template.browserInfo || ''}
                onChange={(e) => setTemplate(prev => ({ ...prev, browserInfo: e.target.value }))}
                placeholder="e.g., Chrome 91.0.4472.124 on macOS"
              />
            </div>

            {/* Reproduction Steps */}
            <div className="space-y-2">
              <Label className="text-sm font-medium">Steps to Reproduce</Label>
              <div className="space-y-2">
                {template.reproductionSteps.map((step, index) => (
                  <div key={index} className="flex gap-2">
                    <span className="text-sm text-muted-foreground mt-2">{index + 1}.</span>
                    <Textarea
                      value={step}
                      onChange={(e) => {
                        const newSteps = [...template.reproductionSteps];
                        newSteps[index] = e.target.value;
                        setTemplate(prev => ({ ...prev, reproductionSteps: newSteps }));
                      }}
                      placeholder="Describe this step"
                      rows={2}
                      className="flex-1 resize-none"
                    />
                  </div>
                ))}
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => setTemplate(prev => ({ 
                    ...prev, 
                    reproductionSteps: [...prev.reproductionSteps, ''] 
                  }))}
                >
                  Add Step
                </Button>
              </div>
            </div>

            {/* Expected vs Actual Behavior */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="expected" className="text-sm font-medium">Expected Behavior</Label>
                <Textarea
                  id="expected"
                  value={template.expectedBehavior}
                  onChange={(e) => setTemplate(prev => ({ ...prev, expectedBehavior: e.target.value }))}
                  placeholder="What should happen?"
                  rows={3}
                  className="resize-none"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="actual" className="text-sm font-medium">Actual Behavior</Label>
                <Textarea
                  id="actual"
                  value={template.actualBehavior}
                  onChange={(e) => setTemplate(prev => ({ ...prev, actualBehavior: e.target.value }))}
                  placeholder="What actually happens?"
                  rows={3}
                  className="resize-none"
                />
              </div>
            </div>

            {/* Screenshot Upload */}
            <div className="space-y-2">
              <Label className="text-sm font-medium">Screenshots</Label>
              <div className="border-2 border-dashed border-border rounded-lg p-4">
                <div className="text-center">
                  <Upload className="w-8 h-8 text-muted-foreground mx-auto mb-2" />
                  <p className="text-sm text-muted-foreground mb-2">
                    Upload screenshots or drag and drop
                  </p>
                  <input
                    type="file"
                    multiple
                    accept="image/*"
                    onChange={handleFileUpload}
                    className="hidden"
                    id="screenshot-upload"
                  />
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => document.getElementById('screenshot-upload')?.click()}
                  >
                    Choose Files
                  </Button>
                </div>
              </div>
              
              {screenshots.length > 0 && (
                <div className="flex flex-wrap gap-2 mt-2">
                  {screenshots.map((file, index) => (
                    <Badge key={index} variant="secondary" className="flex items-center gap-1">
                      {file.name}
                      <button
                        onClick={() => removeScreenshot(index)}
                        className="ml-1 hover:text-destructive"
                      >
                        <X className="w-3 h-3" />
                      </button>
                    </Badge>
                  ))}
                </div>
              )}
            </div>
          </TabsContent>
          
          <TabsContent value="preview" className="mt-6">
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h3 className="font-medium">Generated Markdown</h3>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={copyToClipboard}
                  className="flex items-center gap-2"
                >
                  {copied ? (
                    <>
                      <Check className="w-4 h-4 text-green-600" />
                      Copied!
                    </>
                  ) : (
                    <>
                      <Copy className="w-4 h-4" />
                      Copy
                    </>
                  )}
                </Button>
              </div>
              
              <div className="bg-muted/30 rounded-lg p-4 font-mono text-sm whitespace-pre-wrap border">
                {generateMarkdown()}
              </div>
            </div>
          </TabsContent>
        </Tabs>

        <div className="flex justify-end mt-6">
          <Button 
            onClick={() => onGenerate({ ...template, screenshots })}
            className="px-6"
            disabled={!template.title.trim() || !template.appId?.trim()}
          >
            Generate GitHub Issue
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default IssueTemplate;